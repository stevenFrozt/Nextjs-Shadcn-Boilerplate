import { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import axios from "axios";
import { cookies } from "next/headers";
// import { JWT } from "next-auth/jwt"

declare module "next-auth" {
  // eslint-disable-next-line no-unused-vars
  interface Session {
    user: {
      id: string;
      full_name: string;
      first_name: string;
      last_name: string;
      email: string;
      description: string;
    };
  }
}

interface Credentials {
  email: string;
  password: string;
}

interface BackendUserData {
  id: string;
  role_id: string;
  full_name: string;
  first_name: string;
  last_name: string;
  email: string;
  judge_no?: string;
  description?: string;
}

interface AuthResponse {
  data: {
    token: string;
    user: BackendUserData;
  };
}

const handler: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials: Credentials | undefined) {
        if (!credentials) return null;

        const { email, password } = credentials;
        try {
          axios.defaults.baseURL = process.env.NEXT_PUBLIC_BACKEND_API;
          const res = await axios.post<AuthResponse>("/login", {
            email,
            password,
          });
          cookies().set("backendToken", res.data.data.token, {
            maxAge: 86_400,
          });
          return res.data.data.user;
        } catch (error) {
          console.error(error);
          return null;
        }
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user }) {
      const role = {
        user: "b9612992-1e02-4572-b618-6bcd60d651ac",
        admin: "34300bad-3e5d-4511-b04f-721c2dc8e0e7",
        superAdmin: "8787fc94-01e7-4f3b-a988-3b29409d0b76",
      };

      let currentRole: string | undefined;

      if (user) {
        if ((user as BackendUserData).role_id === role.user) {
          currentRole = "Judge";
        } else if ((user as BackendUserData).role_id === role.admin) {
          currentRole = "Admin";
        } else if ((user as BackendUserData).role_id === role.superAdmin) {
          currentRole = "Super Admin";
        }

        token.id = (user as BackendUserData).id;
        token.full_name = (user as BackendUserData).full_name;
        token.first_name = (user as BackendUserData).first_name;
        token.last_name = (user as BackendUserData).last_name;
        token.email = (user as BackendUserData).email;
        token.judge_no = (user as BackendUserData).judge_no;
        token.description = (user as BackendUserData).description;
      }
      return token;
    },
    async session({ session, token }) {
      if (token && session.user) {
        session.user.id = token.id as string;
        session.user.full_name = token.full_name as string;
        session.user.first_name = token.first_name as string;
        session.user.last_name = token.last_name as string;
        session.user.email = token.email as string;
        session.user.description = token.description as string;
      }
      return session;
    },
  },
  pages: {
    signIn: "/login",
  },
  jwt: {
    maxAge: 1 * 24 * 60 * 60,
  },
  session: {
    strategy: "jwt",
    maxAge: 4 * 60 * 60,
  },
};

export { handler as GET, handler as POST };
